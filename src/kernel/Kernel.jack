/* ION kernel */

class Kernel {
    const HEAP = 0xfc0000, HEAP_END = 0xffcc00;
    const VIDEO = 0xe53000;

    function int main () {
        do TextMode.setCursor(0, 4);
        do TextMode.init();
        do Kernel.testMem();
        return 10;
    }

    function void testMem () {
        // This function is not safe because it does not check for allocation failure
        var int temp, err;
        var Array a, b, c;
        do Memory.kinit(HEAP, HEAP_END);
        a = Array.new(400*4);
        if (a = null) { 
            do TextMode.print("Allocation of array A failed");
            do TextMode.printLn();
        }
        b = Array.new(200*4);
        if (b = null) { 
            do TextMode.print("Allocation of array B failed");
            do TextMode.printLn();
        }
        for (var int i; i = 0; i < 400; i+=1) a[i] = i;
        for (var int i; i = 199; i > 0; i-=1) b[i] = a[i];
        do TextMode.print("> ");
        /*for (var int i; i = 0; i < 10; i+=1) {
            //do TextMode.printInt(b[i]);
            //do TextMode.print(" ");
        }
        */
        //do TextMode.print("END.");
        //do TextMode.printLn();
        do a.dispose();
        let c = Array.new(250*4);
        if (c = null) { 
            do TextMode.print("Allocation of array C failed");
            do TextMode.printLn();
        }
        do b.dispose();
        do c.dispose(); //Null pointer dereference
        return;
    }

    function void interruptHandler (int interrupt) {
        do TextMode.printLn();
        do TextMode.print("Interrupt raised. Signal ");
        do TextMode.printInt(interrupt);
        return;
    }
}