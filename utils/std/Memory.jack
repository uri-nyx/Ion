/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks.
 */ 
class Memory {
    const  ALLOCATED = 0x80000000, FREE = 0x7fffffff;
    const  HEADER_SIZE = 12; // header of block is 8 bytes (2 words) long
    const  FOOTER_SIZE = 4;  // A footer of 4 bytes
    const  next = 1, prev = 2, size = 0; // Struct fields
    static int Kfree, Kheap, Kend;
    static int Ufree, Uheap, Uend;
    static boolean kernel;

    /** Initializes the heap for the Kernel. */
    function void kinit(int heapBase, int end) {
        var int total;
        let Kheap = heapBase, Kend = end, Kfree = Kheap, kernel = true;
        let total = Kend - Kheap - HEADER_SIZE - FOOTER_SIZE;
        let Kfree[size] = FREE | total; // size of heap on start
        let Kfree[next] = null; // next pointer in linked list
        let Kfree[prev] = null; // prev pointer in linked list
        let Kfree[total + HEADER_SIZE] = FREE & total;
        return;
    }

    /** Initializes the heap for userland process. */
    function void kinitUser(int heapBase, int end) {
        let Uheap = heapBase, Uend = end, kernel = false;
        return;
    }

    /** Initializes the class for user code. */
    function void init() {
        var int total;
        let Ufree = Uheap;
        let total = Uend - Uheap - HEADER_SIZE - FOOTER_SIZE;
        let Ufree[size] = FREE | total; // size of heap on start
        let Ufree[next] = null; // next pointer in linUed list
        let Ufree[prev] = null; // prev pointer in linUed list
        let Ufree[total + HEADER_SIZE] = FREE & total;
        return;
    }

    /** Returns wird value at the given address. */
    function int peek(int address) {
        return !address;
    }

    /** Sets the word at the given address to the given value. */
    function void poke(int address, int value) {
        !address = value;
        return;
    }

    /** Returns byte value at the given address. */
    function char peekChar(int address) {
        return #!address;
    }

    /** Sets the byte at the given address to the given value. */
    function void pokeChar(int address, char value) {
        #!address = value;
        return;
    }
    
    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int block, P, S, tail;
        let block = o - HEADER_SIZE;
        if (!(block - 4) >= 0) { // if positive, free
            P = block - !(block - 4) - HEADER_SIZE;
            tail = Memory.getTail(P);
            P[size] += block[size];
            P[next] = block[next];
            P[tail] = FREE & P[size];

        }

        Kfree = block;

        tail = Memory.getTail(block);
        if (block[tail] >= 0) {
            S = block + tail + 4;
            tail = Memory.getTail(S);
            block[size] += S[size];
            block[next] = S[next];
            S[tail] = FREE & S[size];
        }
        return;
    }

    function int getTail(Array block) {
        return HEADER_SIZE + block[size];
    }

}
