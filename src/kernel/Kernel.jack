/* ION kernel */

class Kernel {
    const HEAP = 0xfc0000, HEAP_END = 0xffcc00;
    const VIDEO = 0xe53000;

    function int main () {
        var int exported;
        do TextMode.setCursor(0, 4);
        do TextMode.init();
        do Test.main();
        //do Kernel.testMem();
        let exported = ::1;
        do $!exported();
        return 10;
    }

    function void testMem () {
        // This function is not safe because it does not check for allocation failure
        var int b, block, block1, block2, block3, block4, block5;
        do Memory.minit();
        b = 0;
        let block = Memory.alloc(242000);
        //b += 1;
        do Sys.trace(b);
        do Memory.deAlloc(block);
        //b += 1;
        do Sys.trace(b);
        let block1 = Memory.alloc(30000);
        //b += 1;
        do Sys.trace(b);
        let block2 = Memory.alloc(20000);
        //b += 1;
        do Sys.trace(b);
        let block3 = Memory.alloc(20000);
        //b += 1;
        do Sys.trace(b);
        let block4 = Memory.alloc(50000);
        //b += 1;
        do Sys.trace(b);
        let block5 = Memory.alloc(20000);
        //b += 1;
        do Sys.trace(b);
        do Memory.deAlloc(block3);
        //b += 1;
        do Sys.trace(b);      // random order
        do Memory.deAlloc(block5);
        //b += 1;
        do Sys.trace(b);
        do Memory.deAlloc(block2);
        //b += 1;
        do Sys.trace(b);
        do Memory.deAlloc(block1);
        //b += 1;
        do Sys.trace(b);
        do Memory.deAlloc(block4);
        //b += 1;
        do Sys.trace(b);
        let block = Memory.alloc(242000);
        //b += 1;
        do Sys.trace(b);
        do Memory.deAlloc(block);
        //b += 1;
        do Sys.trace(b);
        return;
    }

    function void interruptHandler (int interrupt) {
        do TextMode.printLn();
        do TextMode.print("Interrupt raised. Signal ");
        do TextMode.printInt(interrupt);
        return;
    }
}